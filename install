#!/bin/bash

# Installer script to set up symlinks for configuration files.
# Assumes it is being run as `./install <path>`, i.e. from the directory
# it lives in.

# TODO(sdh): add conditional logic to the patch scripts, so that
# we can do feature testing rather than whitelist machines.

verbose=false
conf=$(dirname "$0")
conf=${conf-.}
cd $conf
conf=$(pwd -P)

home=$HOME

function whisper {
  if $verbose; then echo "$@"; fi
}

function safe_patch {
  whisper SAFE_PATCH "$@"
  source_orig=$1
  patch=$2
  target=$3

  comment=$(grep 'COMMENT=' $patch | sed 's/^.*COMMENT=//')
  interp=$(head -n 1 $patch | grep '^#!' | sed 's/^#!//')
  comment=${comment:-#}

  if [ ! -e "$target" ] ||
      [ -h "$target" -a "$(readlink $target)" = "$source_orig" ] ||
      grep -q 'DO NOT EDIT' $target; then
    if [ -h "$target" ]; then unlink $target; fi
    cat > $target <<EOF
$comment --------------------------------------------------------------
$comment ATTENTION: THIS FILE IS AUTOMATICALLY GENERATED!  DO NOT EDIT!
$comment Instead edit one of the following
$comment   $source_orig
$comment   $patch
$comment and then re-run $conf/install
$comment --------------------------------------------------------------

EOF
    $interp $patch $source_orig >> $target
  else
    echo "Refusing to write $target: file exists." >&2
  fi
}


function safe_link {
  # First set parameters/defaults
  whisper SAFE_LINK "$@"
  local target=${2:-.$1}
  if [ -n "${target%%/*}" ]; then # allow absolute paths
    target="$home/$target"
  fi
  local source="$conf/$1"
  if [ ! -e "$source" ]; then
    echo "ERROR: $source does not exist" >&2
    return
  fi

  # Now see if it's a dir, in which case we make a symlink tree
  if [ -d "$source" ]; then
    if [ -e "$target" -a ! -d "$target" ]; then
      echo "Cannot symlink tree $source -> $target: file exists." >&2
    fi
    mkdir -p $target
    for a in $(ls -a $source); do
      safe_link $1/$a ${2:-.$1}/$a
    done
    return
  fi

  # Check for a hostname-specific patch
  if [ -e $source.patch.$(hostname -s) ]; then
    safe_patch $source $source.patch.$(hostname -s) $target
    return
  fi

  # Otherwise do some safety checks and make the link
  if [ -h "$target" -a "$(readlink $target)" = "$source" ]; then
    # it's already there
    :
  elif [ -s "$target" ] && diff -q "$source" "$target" &> /dev/null; then
    # identical file: remove and symlink
    rm "$target"
    ln -s "$source" "$target"
  elif [ -s "$target" -o -d "$target" ]; then
    echo "Cannot symlink $source -> $target: file exists." >&2
  else
    ln -s "$source" "$target"
  fi
}


function install_files {
  echo "Installing config files from $conf into $home..."

  safe_link Xmodmap
  safe_link Xdefaults
  safe_link tmux.conf
  safe_link bashrc
  safe_link zshrc
  safe_link gitconfig
  safe_link gitignore_global
  safe_link aspell.en.pws
  safe_link dot-emacs .emacs

  # Link everything in the bash directory
  cd bash
  mkdir -p $home/.bash.d
  for a in *.sh; do
    safe_link bash/$a .bash.d/$a
  done

  # Unlink everything in the disabled directory
  if [ -d disabled ]; then
    cd disabled
    for a in *.sh; do
      target="$home/.bash.d/$a"
      if [ -h $target -a "$(readlink $target)" = "$conf/bash/$a" ]; then
        rm -f $target
      elif [ -s "$target" ]; then
        echo "Refusing to delete non-symlink $target even though disabled."
      fi
    done
    cd ..
  fi
  cd ..

  # Link everything in the bin directory
  mkdir -p $home/local/bin
  for a in bin/*; do
    safe_link $a local/$a
  done

  # Make bash completion dir so somebody doesn't complain
  mkdir -p $home/.bash.d/completion

  # Make sure history dir exists
  mkdir -p $home/history

  # Install urxvt extensions
  install_urxvt

  # Link all the emacs files
  #cd emacs
  #mkdir -p $home/.emacs.d
  #for a in *.el; do
  #  safe_link emacs/$a .emacs.d/$a
  #done

  # Install .gitconfig.d
  mkdir -p $home/.gitconfig.d/templates
  if [ -e /usr/share/git-core/templates ]; then
    cp -nr /usr/share/git-core/templates/* $home/.gitconfig.d/templates
  fi
  if [ -e git ]; then # this is safe to remove if we ever add a git/ dir
    for a in git/*; do
      safe_link $a .gitconfig.d/${a#git/}
    done
  fi
}

function install_term {
  # Install the tmux-256color terminfo config
  echo "Generating tmux-256color.terminfo..."
  $conf/gen/tmux
}

function install_gtk {
  # Set up chrome/emacs keybindings using the tool instead
  # Also set up focus follows mouse and window buttons
  # NOTE: this only works in we're running locally
  echo "Configuring gtk keybindings..."
  safe_link gtkrc-2.0
  if which gsettings &>/dev/null; then
    gsettings set org.gnome.desktop.interface gtk-key-theme Emacs
    gsettings set org.gnome.desktop.wm.preferences focus-mode sloppy
    gsettings set org.gnome.desktop.wm.preferences auto-raise false
    gsettings set org.gnome.desktop.wm.preferences button-layout \
        'menu:minimize,maximize,close'
    gsettings set org.gnome.desktop.wm.preferences \
        action-double-click-titlebar 'toggle-shade'
    gsettings set org.gnome.desktop.wm.preferences \
        resize-with-right-button true
  elif which gconftool-2 &>/dev/null; then
    gconftool-2 --set /desktop/gnome/interface/gtk_key_theme Emacs \
        --type string
    gconftool-2 --set /apps/metacity/general/focus_mode sloppy \
        --type string
    gconftool-2 --set /apps/metacity/general/auto-raise false \
        --type bool
    gconftool-2 --set /apps/metacity/general/button_layout \
        'menu:minimize,maximize,close' --type string
    gconftool-2 --set /apps/metacity/general/action_double_click_titlebar \
        'toggle_shade' --type string
    gconftool-2 --set /apps/metacity/general/resize_with_right_button \
        true --type bool
  fi
}

function install_urxvt {
  # Detects URXVT install dir and installs it - called from install_files
  if ! which urxvt &> /dev/null; then return; fi
  local urxvt=$(readlink -f $(which urxvt))
  local perldir=${urxvt%/bin*}/lib/urxvt/perl
  safe_link urxvt/mycopy-osc ${perldir}/mycopy-osc
}

function print_usage {
  cat <<EOF
Usage: install [home dir] [files|term|gtk|all]...
Note that the home dir MUST come first if it is given
Functions:
  files - symlink all dot-files
  term  - generate the tmux-256color terminfo
  gtk   - configure gtk apps to use emacs keybindings
  all   - all of the above
EOF
  exit 1
}

if [ $# -eq 0 ]; then
  print_usage
fi

while [ $# -gt 0 ]; do
  case "$1" in 
    (files) install_files ;;
    (term)  install_term ;;
    (gtk)   install_gtk ;;
    (all)   install_files; install_term; install_gtk ;;
    (*) if [ -f $1 ]; then
          home=$1
        else
          print_usage
        fi
        ;;
  esac
  shift
done
