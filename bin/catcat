#!/usr/bin/perl

# Usage catcat [-c count] [lines]

my $count = 2;
$count = $ARGV[1], shift, shift if $ARGV[0] eq '-c';
my $lines = shift or `tput lines`; chomp $lines;
my $cols = `tput cols`; chomp $cols;

sub ceil {
  my $i = int($_[0]);
  return $i if $i == $_[0];
  return $i + 1;
}

my @col = map {ceil(($cols + 1) * $_ / $count)} (0..$count);

my @data = ();
while (@data < $count * $lines) {
  $_ = <>;
  chomp $_;
  push @data, $_;
  last if eof;
}

# Trims $_[0] down to $_[1] visible chars, returning (str, visible length)
sub trim {
  my ($str, $len) = @_;
  $str =~ s/(?:(?:\e\[[^m]*m)*[^\e]?+){0,$len}\K.*//;
  (my $stripped = $str) =~ s/\e\[[0-9;]*[^0-9;]//g;
  return ($str, length($stripped));
}

for (my $i = 0; $i < $lines; $i++) {
  for (my $j = 0; $j < $count; $j++) {
    print "\e[m " if $j;
    my $line = $data[$i + $j * $lines];
    my $target = $col[$j + 1] - $col[$j] - 1;
    my ($trimmed, $len) = trim($line, $target);
    print $trimmed . (' ' x ($target - $len));
  }
  print "\n";
}
